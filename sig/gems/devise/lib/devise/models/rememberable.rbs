module Devise
  module Models
    # Rememberable manages generating and clearing token for remembering the user
    # from a saved cookie. Rememberable also has utility methods for dealing
    # with serializing the user into the cookie and back from the cookie, trying
    # to lookup the record based on the saved information.
    # You probably wouldn't use rememberable methods directly, they are used
    # mostly internally for handling the remember token.
    #
    # == Options
    #
    # Rememberable adds the following options to +devise+:
    #
    #   * +remember_for+: the time you want the user will be remembered without
    #     asking for credentials. After this time the user will be blocked and
    #     will have to enter their credentials again. This configuration is also
    #     used to calculate the expires time for the cookie created to remember
    #     the user. By default remember_for is 2.weeks.
    #
    #   * +extend_remember_period+: if true, extends the user's remember period
    #     when remembered via cookie. False by default.
    #
    #   * +rememberable_options+: configuration options passed to the created cookie.
    #
    # == Examples
    #
    #   User.find(1).remember_me!  # regenerating the token
    #   User.find(1).forget_me!    # clearing the token
    #
    #   # generating info to put into cookies
    #   User.serialize_into_cookie(user)
    #
    #   # lookup the user based on the incoming cookie information
    #   User.serialize_from_cookie(cookie_string)
    module Rememberable
      extend ActiveSupport::Concern

      attr_accessor remember_me: untyped

      def self.required_fields: (untyped klass) -> ::Array[:remember_created_at]

      def remember_me!: () -> untyped

      # If the record is persisted, remove the remember token (but only if
      # it exists), and save the record without validations.
      def forget_me!: () -> (nil | untyped)

      def remember_expires_at: () -> untyped

      def extend_remember_period: () -> untyped

      def rememberable_value: () -> untyped

      def rememberable_options: () -> untyped

      # A callback initiated after successfully being remembered. This can be
      # used to insert your own logic that is only run after the user is
      # remembered.
      #
      # Example:
      #
      #   def after_remembered
      #     self.update_attribute(:invite_code, nil)
      #   end
      #
      def after_remembered: () -> nil

      def remember_me?: (untyped token, untyped generated_at) -> untyped

      private

      def time_from_json: (untyped value) -> untyped

      module ClassMethods
        # Create the cookie key using the record id and remember_token
        def serialize_into_cookie: (untyped record) -> ::Array[untyped]

        # Recreate the user based on the stored cookie
        def serialize_from_cookie: (*untyped args) -> untyped

        # Generate a token checking if one does not already exist in the database.
        def remember_token: () -> untyped
      end
    end
  end
end
