class OfficeClient < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[OfficeClient, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def staff_id: () -> Integer

    def staff_id=: (Integer) -> Integer

    def staff_id?: () -> bool

    def staff_id_changed?: () -> bool

    def staff_id_change: () -> [ Integer?, Integer? ]

    def staff_id_will_change!: () -> void

    def staff_id_was: () -> Integer?

    def staff_id_previously_changed?: () -> bool

    def staff_id_previous_change: () -> Array[Integer?]?

    def staff_id_previously_was: () -> Integer?

    def staff_id_before_last_save: () -> Integer?

    def staff_id_change_to_be_saved: () -> Array[Integer?]?

    def staff_id_in_database: () -> Integer?

    def saved_change_to_staff_id: () -> Array[Integer?]?

    def saved_change_to_staff_id?: () -> bool

    def will_save_change_to_staff_id?: () -> bool

    def restore_staff_id!: () -> void

    def clear_staff_id_change: () -> void

    def name: () -> String

    def name=: (String) -> String

    def name?: () -> bool

    def name_changed?: () -> bool

    def name_change: () -> [ String?, String? ]

    def name_will_change!: () -> void

    def name_was: () -> String?

    def name_previously_changed?: () -> bool

    def name_previous_change: () -> Array[String?]?

    def name_previously_was: () -> String?

    def name_before_last_save: () -> String?

    def name_change_to_be_saved: () -> Array[String?]?

    def name_in_database: () -> String?

    def saved_change_to_name: () -> Array[String?]?

    def saved_change_to_name?: () -> bool

    def will_save_change_to_name?: () -> bool

    def restore_name!: () -> void

    def clear_name_change: () -> void

    def age: () -> Integer

    def age=: (Integer) -> Integer

    def age?: () -> bool

    def age_changed?: () -> bool

    def age_change: () -> [ Integer?, Integer? ]

    def age_will_change!: () -> void

    def age_was: () -> Integer?

    def age_previously_changed?: () -> bool

    def age_previous_change: () -> Array[Integer?]?

    def age_previously_was: () -> Integer?

    def age_before_last_save: () -> Integer?

    def age_change_to_be_saved: () -> Array[Integer?]?

    def age_in_database: () -> Integer?

    def saved_change_to_age: () -> Array[Integer?]?

    def saved_change_to_age?: () -> bool

    def will_save_change_to_age?: () -> bool

    def restore_age!: () -> void

    def clear_age_change: () -> void

    def furigana: () -> String

    def furigana=: (String) -> String

    def furigana?: () -> bool

    def furigana_changed?: () -> bool

    def furigana_change: () -> [ String?, String? ]

    def furigana_will_change!: () -> void

    def furigana_was: () -> String?

    def furigana_previously_changed?: () -> bool

    def furigana_previous_change: () -> Array[String?]?

    def furigana_previously_was: () -> String?

    def furigana_before_last_save: () -> String?

    def furigana_change_to_be_saved: () -> Array[String?]?

    def furigana_in_database: () -> String?

    def saved_change_to_furigana: () -> Array[String?]?

    def saved_change_to_furigana?: () -> bool

    def will_save_change_to_furigana?: () -> bool

    def restore_furigana!: () -> void

    def clear_furigana_change: () -> void

    def postal: () -> String

    def postal=: (String) -> String

    def postal?: () -> bool

    def postal_changed?: () -> bool

    def postal_change: () -> [ String?, String? ]

    def postal_will_change!: () -> void

    def postal_was: () -> String?

    def postal_previously_changed?: () -> bool

    def postal_previous_change: () -> Array[String?]?

    def postal_previously_was: () -> String?

    def postal_before_last_save: () -> String?

    def postal_change_to_be_saved: () -> Array[String?]?

    def postal_in_database: () -> String?

    def saved_change_to_postal: () -> Array[String?]?

    def saved_change_to_postal?: () -> bool

    def will_save_change_to_postal?: () -> bool

    def restore_postal!: () -> void

    def clear_postal_change: () -> void

    def address: () -> String

    def address=: (String) -> String

    def address?: () -> bool

    def address_changed?: () -> bool

    def address_change: () -> [ String?, String? ]

    def address_will_change!: () -> void

    def address_was: () -> String?

    def address_previously_changed?: () -> bool

    def address_previous_change: () -> Array[String?]?

    def address_previously_was: () -> String?

    def address_before_last_save: () -> String?

    def address_change_to_be_saved: () -> Array[String?]?

    def address_in_database: () -> String?

    def saved_change_to_address: () -> Array[String?]?

    def saved_change_to_address?: () -> bool

    def will_save_change_to_address?: () -> bool

    def restore_address!: () -> void

    def clear_address_change: () -> void

    def family: () -> String

    def family=: (String) -> String

    def family?: () -> bool

    def family_changed?: () -> bool

    def family_change: () -> [ String?, String? ]

    def family_will_change!: () -> void

    def family_was: () -> String?

    def family_previously_changed?: () -> bool

    def family_previous_change: () -> Array[String?]?

    def family_previously_was: () -> String?

    def family_before_last_save: () -> String?

    def family_change_to_be_saved: () -> Array[String?]?

    def family_in_database: () -> String?

    def saved_change_to_family: () -> Array[String?]?

    def saved_change_to_family?: () -> bool

    def will_save_change_to_family?: () -> bool

    def restore_family!: () -> void

    def clear_family_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods

  def avatar_attachment: () -> ActiveStorage::Attachment?
  def avatar_attachment=: (ActiveStorage::Attachment?) -> ActiveStorage::Attachment?
  def build_avatar_attachment: (untyped) -> ActiveStorage::Attachment
  def create_avatar_attachment: (untyped) -> ActiveStorage::Attachment
  def create_avatar_attachment!: (untyped) -> ActiveStorage::Attachment
  def reload_avatar_attachment: () -> ActiveStorage::Attachment?
  def avatar_blob: () -> ActiveStorage::Blob?
  def avatar_blob=: (ActiveStorage::Blob?) -> ActiveStorage::Blob?
  def build_avatar_blob: (untyped) -> ActiveStorage::Blob
  def create_avatar_blob: (untyped) -> ActiveStorage::Blob
  def create_avatar_blob!: (untyped) -> ActiveStorage::Blob
  def reload_avatar_blob: () -> ActiveStorage::Blob?
  def staff: () -> Staff
  def staff=: (Staff?) -> Staff?
  def reload_staff: () -> Staff?
  def build_staff: (untyped) -> Staff
  def create_staff: (untyped) -> Staff
  def create_staff!: (untyped) -> Staff
  module GeneratedAssociationMethods
    def avatar: () -> ActiveStorage::Attached::One

    def avatar=: (ActionDispatch::Http::UploadedFile) -> ActionDispatch::Http::UploadedFile
               | (Rack::Test::UploadedFile) -> Rack::Test::UploadedFile
               | (ActiveStorage::Blob) -> ActiveStorage::Blob
               | (String) -> String
               | ({ io: IO, filename: String, content_type: String? }) -> { io: IO, filename: String, content_type: String? }
               | (nil) -> nil
  end
  include GeneratedAssociationMethods

  def self.with_attached_avatar: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def with_attached_avatar: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[OfficeClient, Integer]
    include Enumerable[OfficeClient]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[OfficeClient, Integer]
  end
end
